# TODO: remove once the script is ultimated
OBJECT_DETECTION

PROCEDURE global OBJECT_DETECTION
{
    
    # Select a target model group
    CC "CoreUI" MODEL_SELECT_BOX without-models mgroup-sel title:"Select at least one target modelgroup"
    IF (endbutton != "ok") {
        SETL targetID:-1
        EXIT
    }
    SETL a_mgroupids:(mgroupids)

    # Let the user enter a new modelname
    CC "AdoScript" EDITFIELD title:("New model name") caption:("Modelname:")
    IF (ecode != 0) {
        SETL targetID:-1
        EXIT
    }
    SETL a_name:(text)

    CC "Core" CREATE_MODEL modeltype:("IoT Scenario") modelname:(a_name) version:"" mgroups:(a_mgroupids)
        
    IF (ecode = 0) {
        SETL a_dstmodelid:(modelid)
    } ELSIF (ecode = 40) {
        CC "AdoScript" ERRORBOX ("A model with the same name already exists") ok
    } ELSE {
        CC "AdoScript" ERRORBOX ("An error occured creating the new model: " + errtext) ok
    }
   
   ## 5.
    # Open new model in modeling
    CC "Modeling" OPEN modelids:(STR a_dstmodelid)
    CC "Modeling" SET_VIEW_MODE modelid:(a_dstmodelid) mode-name:"PSM"
    CC "Core" SET_ATTR_VAL objid:(a_dstmodelid) attrname:"Model Type" val:("PSM")
    CC "Core" SET_ATTR_VAL objid:(a_dstmodelid) attrname:"Platform" val:("Object_detection")

    ## 6.
    # Get all objects from new model
    CC "Core" GET_ALL_OBJS modelid:(a_dstmodelid)
    IF (ecode != 0) {
        CC "AdoScript" ERRORBOX "Something went very wrong here (e.g. we passed the wrong model id)!\n"
        CC "Modeling" CLOSE modelid:(a_dstmodelid) quiet
        CC "Core" DELETE_MODEL modelid:(a_dstmodelid)
        SETL targetID:-1
        EXIT
    }

    # Add PSM attributes to objects
    FOR obj in:(objids) {
        SET_SPECIFICATIONS objID:(obj) specs:(specs)
    }

     ## 7.
    # Save and discard model
    CC "Core" SAVE_MODEL modelid:(a_dstmodelid)
    SET targetID:(a_dstmodelid)    #CC "Core" DISCARD_MODEL modelid:(a_dstmodelid)


    # READ .JSON FILE: create elements and assign them their values (read from the json file)
    # Select the .json file path
    CC "AdoScript" FILE_DIALOG open
        filter1:"JSON Files" type1:"*.json" default-ext:"json"
    SET filePath:(path)
    IF (filePath = "") {
        CC "AdoScript" ERRORBOX ("No file selected. Process aborted.")
        EXIT
    }

    # Read JSON file
    CC "AdoScript" FREAD file:(filePath)
    IF (ecode != 0) {
        CC "AdoScript" ERRORBOX ("The file is not readable!") ok
        EXIT
    }

    # Convert file content to JSON
    SETL specs:(fromJson(text))
    SET objectsArray:(specs["objects"])

    GET_SPECIFICATIONS platform:("Object_detection") specs:specs
    SET specifications:(specs)

    # create elements from the json
	CREATE_NEW_OBJECTS modelid:targetID objects:objectsArray
}

# Create new object and set new name (and Name) value
PROCEDURE global CREATE_NEW_OBJECTS 
modelid:reference
objects:reference
{
        
    EXTRACT_CLASSIDS    # always usefull


    FOR i from:0 to:(LEN objects-1) {
		SETL objectType:(objects[i] SUB "objectType")
        SETL capability1:(objects[i] SUB "capability1")
		SETL capability2:(objects[i] SUB "capability2")
		SETL specification:(objects[i] SUB "Nspecification")
		SETL xPosition:(objects[i] SUB "Xposition")
        SETL yPosition:(objects[i] SUB "Yposition")


        IF( objectType = "person") {
	        CC "Core" CREATE_OBJ modelid:(modelid) classid:(personClassId)
        } ELSIF(objectType ="gateway") {
	        CC "Core" CREATE_OBJ modelid:(modelid) classid:(gatewayClassId)
        } ELSIF(objectType ="thermometer") {
	        CC "Core" CREATE_OBJ modelid:(modelid) classid:(thermometerClassId)
        } ELSIF(objectType ="photocell") {
	        CC "Core" CREATE_OBJ modelid:(modelid) classid:(photocellClassId)
        } ELSIF(objectType ="airQuality") {
	        CC "Core" CREATE_OBJ modelid:(modelid) classid:(airQualityClassId)
        }
    	SETL newObjId:(objid)
        SET_SPECIFICATIONS objID: (STR newObjId) specs: (specs)
	    CC "Core" SET_ATTR_VAL objid:(newObjId) attrname:("name") val:(objectType)
    	CC "Core" SET_ATTR_VAL objid:(newObjId) attrname:("Name") val:(objectType)

        SETL x:(CM(xPosition))
        SETL y:(CM(yPosition))

        CC "Modeling" SET_OBJ_POS objid:(newObjId) x:(x) y:(y)
        
		#CC "Core" GET_ATTR_ID classid:(deviceClassId) attrname:("specification")

		#CC "Core" GET_REC_ATTR_ROW_ID objid:(newObjId) attrid:(attrid) index:1
        #CC "Core" SET_ATTR_VAL objid:(rowid) attrname:("Value") val:(capability1)

        #CC "Core" GET_REC_ATTR_ROW_ID objid:(newObjId) attrid:(attrid) index:2
        #CC "Core" SET_ATTR_VAL objid:(rowid) attrname:("Value") val:(capability2)

		#CC "Core" GET_REC_ATTR_ROW_ID objid:(newObjId) attrid:(attrid) index:3
        #CC "Core" SET_ATTR_VAL objid:(rowid) attrname:("Value") val:(specification)
    }
}

# Call this procedure once to avoid repeating n times the GET_CLASS_ID command call
PROCEDURE global EXTRACT_CLASSIDS 
{
	# Classes
    CC "Core" GET_CLASS_ID classname:("person")
	SETG personClassId:(classid)
    CC "Core" GET_CLASS_ID classname:("airQuality")
	SETG airQualityClassId:(classid)
    CC "Core" GET_CLASS_ID classname:("thermometer")
	SETG thermometerClassId:(classid)
    CC "Core" GET_CLASS_ID classname:("gateway")
	SETG gatewayClassId:(classid)
    CC "Core" GET_CLASS_ID classname:("photocell")
    SETG photocellClassId:(classid)

	# Relation classes
	CC "Core" GET_CLASS_ID classname:("objDetLink")
	SETG objDetLinkClassId:(classid)
}


PROCEDURE global SET_SPECIFICATIONS
objID:string # Object's id
specs:map # Platform's specifications
{
    # Get object's classname
    CC "Core" GET_CLASS_ID objid:(VAL objID)
    CC "Core" GET_CLASS_NAME classid:(classid)
    SETL class:(specs[classname])
    
    IF (type(class) = "map") {
        CC "Core" GET_ATTR_ID classid:(classid) attrname:("specification")
        IF (attrid != -1 AND type(class["specs"]) = "map") {
            SETL attrs:(mapKeysArray(class["specs"]))
            FOR j from:0 to:(attrs.length-1) {
                # Add attribute to specification table
                SETL attrClass:(class["specs"][attrs[j]])
                CC "Core" ADD_REC_ROW objid:(VAL objID) attrid:(attrid)
                CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:(attrs[j])
                IF (type(attrClass) = "map") {
                    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Type" val:(attrClass["type"])
                    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Description" val:(attrClass["description"])
                }
                IF (ecode != 0) {
                    CC "AdoScript" ERRORBOX ("Error adding a row to attribute \"" + (attrs[j]) + "\"")
                    EXIT
                }
            }
        }
        # Get all outcoming connectors
        IF (type(class["config"]) != "undefined") {
            CC "Core" GET_CONNECTORS objid:(VAL objID) out
            FOR connector in:(objids) {
                # Add connector types
                SETL types:(lam_toList(class["output"], "~"))
                CC "Core" SET_ATTR_VAL objid:(VAL connector) attrname:"available_types" val:(types)
            }
        }
    } ELSIF (type(class) = "array") {
        SETL types:(mapKeysList(class[0]))
        CC "Core" SET_ATTR_VAL objid:(VAL objID) attrname:("available_types") val:(types)
    }
}

## Procedure to get platform specifications
PROCEDURE global GET_SPECIFICATIONS 
platform:string # Platform's name
specs:reference # Platform's specifications (output)
{
    ## 1.
    # Select right file
    SETL filePath:(-1)
    IF (platform = "Object_detection") {
        SETL filePath:("db:\\Object_detection.json")
    } 

    # Read JSON file
    CC "AdoScript" FREAD file:(filePath)
    IF (ecode != 0) {
        CC "AdoScript" ERRORBOX ("The file is not readable!") ok
        EXIT
    }

    ## 2.
    # Convert file content to JSON
    SETL specs:(fromJson(text))
}